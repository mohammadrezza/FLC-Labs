
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\007\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\011\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\004\000\002\012\005\000" +
    "\002\012\003\000\002\012\003\000\002\013\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\020\004\012\014\007\020\004\022\015\023" +
    "\013\024\017\025\016\001\002\000\020\004\012\014\007" +
    "\020\004\022\031\023\030\024\017\025\016\001\002\000" +
    "\014\006\042\007\040\012\ufffc\013\037\014\041\001\002" +
    "\000\012\006\033\011\034\012\ufffa\014\032\001\002\000" +
    "\020\004\012\014\007\020\004\022\031\023\030\024\017" +
    "\025\016\001\002\000\004\002\074\001\002\000\016\006" +
    "\uffeb\007\uffeb\012\uffeb\013\uffeb\014\uffeb\021\uffeb\001\002" +
    "\000\010\022\061\024\017\025\016\001\002\000\014\006" +
    "\uffe4\010\056\011\uffe4\012\uffe4\014\uffe4\001\002\000\022" +
    "\004\012\014\007\015\053\020\004\022\015\023\013\024" +
    "\017\025\016\001\002\000\016\006\uffea\007\uffea\010\025" +
    "\012\uffea\013\uffea\014\uffea\001\002\000\022\005\ufff8\006" +
    "\ufff8\007\ufff8\012\ufff8\013\ufff8\014\ufff8\017\ufff8\021\ufff8" +
    "\001\002\000\022\005\ufff9\006\ufff9\007\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\017\ufff9\021\ufff9\001\002\000\020\006\uffe3" +
    "\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\021\uffe3\001" +
    "\002\000\004\012\ufffd\001\002\000\004\012\ufffb\001\002" +
    "\000\004\012\024\001\002\000\022\004\ufffe\014\ufffe\015" +
    "\ufffe\020\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\001\002" +
    "\000\020\004\012\014\007\020\004\022\031\023\030\024" +
    "\017\025\016\001\002\000\014\006\042\007\040\012\ufff3" +
    "\013\037\014\041\001\002\000\010\006\033\011\034\014" +
    "\032\001\002\000\020\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\021\uffe4\001\002\000\016\006\uffea\007" +
    "\uffea\012\uffea\013\uffea\014\uffea\021\uffea\001\002\000\020" +
    "\004\012\014\007\020\004\022\031\023\030\024\017\025" +
    "\016\001\002\000\020\004\012\014\007\020\004\022\031" +
    "\023\030\024\017\025\016\001\002\000\020\004\012\014" +
    "\007\020\004\022\031\023\030\024\017\025\016\001\002" +
    "\000\012\006\042\007\040\013\037\014\041\001\002\000" +
    "\020\006\033\007\uffee\011\034\012\uffee\013\uffee\014\032" +
    "\021\uffee\001\002\000\020\004\012\014\007\020\004\022" +
    "\031\023\030\024\017\025\016\001\002\000\020\004\012" +
    "\014\007\020\004\022\031\023\030\024\017\025\016\001" +
    "\002\000\020\004\012\014\007\020\004\022\031\023\030" +
    "\024\017\025\016\001\002\000\020\004\012\014\007\020" +
    "\004\022\031\023\030\024\017\025\016\001\002\000\016" +
    "\006\ufff2\007\040\012\ufff2\013\037\014\ufff2\021\ufff2\001" +
    "\002\000\016\006\ufff1\007\040\012\ufff1\013\037\014\ufff1" +
    "\021\ufff1\001\002\000\016\006\ufff0\007\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\021\ufff0\001\002\000\020\006\uffe6\007\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\021\uffe6\001\002\000" +
    "\016\006\uffef\007\uffef\012\uffef\013\uffef\014\uffef\021\uffef" +
    "\001\002\000\020\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\021\uffe5\001\002\000\020\006\uffe8\007\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\021\uffe8\001\002\000" +
    "\020\006\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\021\uffe7\001\002\000\004\002\000\001\002\000\004\012" +
    "\055\001\002\000\022\004\uffff\014\uffff\015\uffff\020\uffff" +
    "\022\uffff\023\uffff\024\uffff\025\uffff\001\002\000\020\004" +
    "\012\014\007\020\004\022\031\023\030\024\017\025\016" +
    "\001\002\000\012\006\033\011\034\012\uffe9\014\032\001" +
    "\002\000\004\017\067\001\002\000\004\017\062\001\002" +
    "\000\010\022\064\024\017\025\016\001\002\000\004\005" +
    "\066\001\002\000\004\005\065\001\002\000\020\006\ufff6" +
    "\007\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\021\ufff6\001" +
    "\002\000\020\006\ufff4\007\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\021\ufff4\001\002\000\010\022\071\024\017\025" +
    "\016\001\002\000\004\005\073\001\002\000\004\005\072" +
    "\001\002\000\020\006\ufff5\007\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\021\ufff5\001\002\000\020\006\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\021\ufff7\001\002\000" +
    "\004\002\001\001\002\000\016\006\uffed\007\040\012\uffed" +
    "\013\037\014\uffed\021\uffed\001\002\000\014\006\042\007" +
    "\040\013\037\014\041\021\077\001\002\000\016\006\uffec" +
    "\007\uffec\012\uffec\013\uffec\014\uffec\021\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\024\002\007\003\013\004\022\007\010\010" +
    "\017\011\020\012\004\013\021\014\005\001\001\000\012" +
    "\007\010\010\017\012\075\014\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\010\010\017\012\074" +
    "\014\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\057\001\001\000\002\001\001\000\020\004\053" +
    "\007\010\010\017\011\020\012\004\013\021\014\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\010\010\017" +
    "\012\025\014\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\010" +
    "\010\017\012\034\014\051\001\001\000\012\007\010\010" +
    "\017\012\034\014\050\001\001\000\012\007\010\010\017" +
    "\012\034\014\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\010\010\017\012\046\014\047\001\001" +
    "\000\012\007\010\010\017\012\044\014\045\001\001\000" +
    "\012\007\010\010\017\012\043\014\026\001\001\000\012" +
    "\007\010\010\017\012\042\014\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\010\010\017\012\034\014\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    symbolTable = new HashMap<String, Float>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


     public HashMap <String, Float>symbolTable;

    public Object stack(int position){
        return (((Symbol)stack.elementAt(tos + position)).value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= LINES QUM 
            { parser.Tree.reduce(2,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINES ::= LINES LINE SC 
            { parser.Tree.reduce(3,"LINES",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINES ::= LINE SC 
            { parser.Tree.reduce(2,"LINES",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LINE ::= SCA_ASS 
            { parser.Tree.reduce(1,"LINE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LINE ::= SCA_EXP 
            { parser.Tree.reduce(1,"LINE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LINE ::= VEC_ASS 
            { parser.Tree.reduce(1,"LINE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LINE ::= VEC_EXP 
            { parser.Tree.reduce(1,"LINE",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SCA_REAL ::= FNUM 
            { parser.Tree.reduce(1,"SCA_REAL",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_REAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SCA_REAL ::= SINUM 
            { parser.Tree.reduce(1,"SCA_REAL",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_REAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VEC ::= OB SCA_REAL CM SCA_REAL CB 
            { parser.Tree.reduce(5,"VEC",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VEC ::= OB SCA_VAR CM SCA_VAR CB 
            { parser.Tree.reduce(5,"VEC",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VEC ::= OB SCA_REAL CM SCA_VAR CB 
            { parser.Tree.reduce(5,"VEC",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VEC ::= OB SCA_VAR CM SCA_REAL CB 
            { parser.Tree.reduce(5,"VEC",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SCA_ASS ::= SCA_VAR EQ SCA_EXP 
            { parser.Tree.reduce(3,"SCA_ASS",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_ASS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SCA_EXP ::= SCA_EXP PLUS SCA_EXP 
            { parser.Tree.reduce(3,"SCA_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SCA_EXP ::= SCA_EXP DASH SCA_EXP 
            { parser.Tree.reduce(3,"SCA_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SCA_EXP ::= SCA_EXP STAR SCA_EXP 
            { parser.Tree.reduce(3,"SCA_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SCA_EXP ::= SCA_EXP SL SCA_EXP 
            { parser.Tree.reduce(3,"SCA_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SCA_EXP ::= VEC_EXP DOT VEC_EXP 
            { parser.Tree.reduce(3,"SCA_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SCA_EXP ::= DASH SCA_EXP 
            { parser.Tree.reduce(2,"SCA_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SCA_EXP ::= OP SCA_EXP CP 
            { parser.Tree.reduce(3,"SCA_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SCA_EXP ::= SCA_REAL 
            { parser.Tree.reduce(1,"SCA_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SCA_EXP ::= SCA_VAR 
            { parser.Tree.reduce(1,"SCA_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCA_EXP",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VEC_ASS ::= VEC_VAR EQ VEC_EXP 
            { parser.Tree.reduce(3,"VEC_ASS",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC_ASS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VEC_EXP ::= VEC_EXP PLUS VEC_EXP 
            { parser.Tree.reduce(3,"VEC_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC_EXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VEC_EXP ::= VEC_EXP DASH VEC_EXP 
            { parser.Tree.reduce(3,"VEC_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC_EXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VEC_EXP ::= SCA_EXP STAR VEC_EXP 
            { parser.Tree.reduce(3,"VEC_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC_EXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VEC_EXP ::= SCA_EXP SL VEC_EXP 
            { parser.Tree.reduce(3,"VEC_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC_EXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VEC_EXP ::= VEC_VAR 
            { parser.Tree.reduce(1,"VEC_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC_EXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VEC_EXP ::= VEC 
            { parser.Tree.reduce(1,"VEC_EXP",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VEC_EXP",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
