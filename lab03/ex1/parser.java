
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\005\000\002\006\003" +
    "\000\002\006\003\000\002\005\003\000\002\005\005\000" +
    "\002\007\003\000\002\007\006\000\002\025\003\000\002" +
    "\025\004\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\011\006\000\002\012\003" +
    "\000\002\012\006\000\002\012\006\000\002\013\003\000" +
    "\002\013\003\000\002\013\004\000\002\013\003\000\002" +
    "\013\005\000\002\014\011\000\002\015\005\000\002\017" +
    "\004\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\021" +
    "\003\000\002\021\003\000\002\022\011\000\002\023\005" +
    "\000\002\027\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\006\042\010\043\004\001\002\000\004\006" +
    "\ufffb\001\002\000\016\006\031\007\033\010\030\011\024" +
    "\042\010\043\004\001\002\000\004\006\013\001\002\000" +
    "\004\002\012\001\002\000\004\006\ufffc\001\002\000\016" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\042\uffff\043\uffff\001" +
    "\002\000\004\002\001\001\002\000\012\015\ufff8\021\ufff8" +
    "\022\021\023\ufff8\001\002\000\006\021\016\023\017\001" +
    "\002\000\010\015\ufffa\021\ufffa\023\ufffa\001\002\000\004" +
    "\006\013\001\002\000\016\006\ufffd\007\ufffd\010\ufffd\011" +
    "\ufffd\042\ufffd\043\ufffd\001\002\000\010\015\ufff9\021\ufff9" +
    "\023\ufff9\001\002\000\004\004\022\001\002\000\004\020" +
    "\023\001\002\000\010\015\ufff7\021\ufff7\023\ufff7\001\002" +
    "\000\004\014\117\001\002\000\014\002\000\006\031\007" +
    "\033\010\030\011\024\001\002\000\016\002\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\017\ufff1\001\002\000\016\006" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\042\ufffe\043\ufffe\001\002" +
    "\000\004\014\065\001\002\000\032\015\uffef\022\060\023" +
    "\uffef\024\uffef\025\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\035\uffef\036\uffef\001\002\000\016\002\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\017\ufff4\001\002\000\004" +
    "\014\054\001\002\000\016\002\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\017\ufff3\001\002\000\016\002\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\017\ufff6\001\002\000\016\002" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\017\ufff2\001\002" +
    "\000\004\036\040\001\002\000\012\004\045\005\041\006" +
    "\031\025\043\001\002\000\004\023\uffeb\001\002\000\010" +
    "\023\uffe9\024\050\025\051\001\002\000\004\005\047\001" +
    "\002\000\004\023\046\001\002\000\004\023\uffec\001\002" +
    "\000\016\002\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\017" +
    "\ufff0\001\002\000\004\023\uffea\001\002\000\006\004\uffd8" +
    "\006\uffd8\001\002\000\006\004\uffd7\006\uffd7\001\002\000" +
    "\004\004\053\001\002\000\004\023\uffe8\001\002\000\004" +
    "\006\013\001\002\000\006\015\056\021\016\001\002\000" +
    "\004\023\057\001\002\000\016\002\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\017\uffd4\001\002\000\006\004\062\006" +
    "\061\001\002\000\004\020\064\001\002\000\004\020\063" +
    "\001\002\000\030\015\uffee\023\uffee\024\uffee\025\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\001\002\000\030\015\uffed\023\uffed\024\uffed\025\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\001\002\000\010\004\072\005\067\006\031\001\002\000" +
    "\004\015\112\001\002\000\022\015\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\001\002\000" +
    "\026\015\uffde\024\050\025\051\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\001\002\000\020\030" +
    "\102\031\077\032\104\033\103\034\075\035\076\036\101" +
    "\001\002\000\026\015\uffdd\024\050\025\051\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\001\002" +
    "\000\004\006\031\001\002\000\022\015\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\001\002" +
    "\000\010\004\uffe0\005\uffe0\006\uffe0\001\002\000\010\004" +
    "\uffdf\005\uffdf\006\uffdf\001\002\000\010\004\uffe3\005\uffe3" +
    "\006\uffe3\001\002\000\010\004\072\005\067\006\031\001" +
    "\002\000\004\036\105\001\002\000\010\004\uffe4\005\uffe4" +
    "\006\uffe4\001\002\000\010\004\uffe1\005\uffe1\006\uffe1\001" +
    "\002\000\010\004\uffe2\005\uffe2\006\uffe2\001\002\000\010" +
    "\004\uffe5\005\uffe5\006\uffe5\001\002\000\004\015\uffd5\001" +
    "\002\000\006\004\111\006\031\001\002\000\022\015\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\001\002\000\022\015\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\001\002\000\004\016" +
    "\113\001\002\000\012\006\031\007\033\010\030\011\024" +
    "\001\002\000\014\006\031\007\033\010\030\011\024\017" +
    "\115\001\002\000\016\002\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\017\uffd6\001\002\000\016\002\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\017\ufff5\001\002\000\010\004\072" +
    "\005\067\006\031\001\002\000\020\030\102\031\077\032" +
    "\104\033\103\034\075\035\076\036\101\001\002\000\004" +
    "\015\122\001\002\000\004\016\123\001\002\000\012\006" +
    "\031\007\033\010\030\011\024\001\002\000\014\006\031" +
    "\007\033\010\030\011\024\017\125\001\002\000\016\002" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\017\uffe7\001\002" +
    "\000\010\004\072\005\067\006\031\001\002\000\004\015" +
    "\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\012\002\006\003\004\004\010\006\005\001" +
    "\001\000\002\001\001\000\024\004\026\006\005\011\031" +
    "\012\036\014\033\022\035\025\024\026\034\027\025\001" +
    "\001\000\006\005\013\007\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\031\012\036\014\033\022\035\026" +
    "\115\027\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\041\013\043\001" +
    "\001\000\002\001\001\000\004\021\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\054\007" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\067" +
    "\020\070\023\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\106\001\001\000\004\017\077\001\001" +
    "\000\004\021\072\001\001\000\004\012\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\067\020\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\011\031\012\036\014\033\022\035\025\113\026" +
    "\034\027\025\001\001\000\016\011\031\012\036\014\033" +
    "\022\035\026\115\027\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\067\015\120\020\117\001\001" +
    "\000\004\017\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\031\012\036\014\033\022\035\025\123" +
    "\026\034\027\025\001\001\000\016\011\031\012\036\014" +
    "\033\022\035\026\115\027\025\001\001\000\002\001\001" +
    "\000\006\012\067\020\126\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= var_decs instrs 
            { parser.Tree.reduce(2,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // var_decs ::= var_dec 
            { parser.Tree.reduce(1,"var_decs",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_decs ::= var_decs var_dec 
            { parser.Tree.reduce(2,"var_decs",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_dec ::= vtk vl S 
            { parser.Tree.reduce(3,"var_dec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // vtk ::= INT_TYPE 
            { parser.Tree.reduce(1,"vtk",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vtk",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // vtk ::= DOUBLE_TYPE 
            { parser.Tree.reduce(1,"vtk",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vtk",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // vl ::= id 
            { parser.Tree.reduce(1,"vl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vl ::= vl CM id 
            { parser.Tree.reduce(3,"vl",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id ::= ID 
            { parser.Tree.reduce(1,"id",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id ::= ID SO INT SC 
            { parser.Tree.reduce(4,"id",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrs ::= instr 
            { parser.Tree.reduce(1,"instrs",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrs ::= instrs instr 
            { parser.Tree.reduce(2,"instrs",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrs",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr ::= iniz 
            { parser.Tree.reduce(1,"instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= while_exp 
            { parser.Tree.reduce(1,"instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= if_exp 
            { parser.Tree.reduce(1,"instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instr ::= print_exp 
            { parser.Tree.reduce(1,"instr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // iniz ::= var EQ vt S 
            { parser.Tree.reduce(4,"iniz",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var ::= ID 
            { parser.Tree.reduce(1,"var",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var ::= ID SO INT SC 
            { parser.Tree.reduce(4,"var",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var ::= ID SO ID SC 
            { parser.Tree.reduce(4,"var",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vt ::= INT 
            { parser.Tree.reduce(1,"vt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vt ::= DOUBLE 
            { parser.Tree.reduce(1,"vt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vt ::= MINUS DOUBLE 
            { parser.Tree.reduce(2,"vt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vt ::= var 
            { parser.Tree.reduce(1,"vt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vt ::= var op INT 
            { parser.Tree.reduce(3,"vt",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // while_exp ::= WHILE RO while_cond RC BO instrs BC 
            { parser.Tree.reduce(7,"while_exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // while_cond ::= side sign side 
            { parser.Tree.reduce(3,"while_cond",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_cond",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sign ::= EQ EQ 
            { parser.Tree.reduce(2,"sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sign ::= MIN 
            { parser.Tree.reduce(1,"sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sign ::= MAJ 
            { parser.Tree.reduce(1,"sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sign ::= MIN_EQ 
            { parser.Tree.reduce(1,"sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sign ::= EQ_MIN 
            { parser.Tree.reduce(1,"sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sign ::= MAJ_EQ 
            { parser.Tree.reduce(1,"sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sign ::= EQ_MAJ 
            { parser.Tree.reduce(1,"sign",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // side ::= var 
            { parser.Tree.reduce(1,"side",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("side",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // side ::= INT 
            { parser.Tree.reduce(1,"side",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("side",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // side ::= DOUBLE 
            { parser.Tree.reduce(1,"side",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("side",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // side ::= var op var 
            { parser.Tree.reduce(3,"side",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("side",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // side ::= var op INT 
            { parser.Tree.reduce(3,"side",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("side",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // side ::= INT op var 
            { parser.Tree.reduce(3,"side",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("side",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op ::= PLUS 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op ::= MINUS 
            { parser.Tree.reduce(1,"op",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if_exp ::= IF RO if_cond RC BO instrs BC 
            { parser.Tree.reduce(7,"if_exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_cond ::= side sign side 
            { parser.Tree.reduce(3,"if_cond",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_cond",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // print_exp ::= PRINT RO vl RC S 
            { parser.Tree.reduce(5,"print_exp",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
